<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_sound(mus_main);
audio_stop_sound(mus_sacrifice);
audio_play_sound(mus_menu, 1, true);

base_item_list = ds_list_create();
for (var i = 0; i &lt; 6; i++)
    ds_list_add(base_item_list, i);

var item_list_string = ds_list_write(base_item_list);
    
ini_open("ss_data");
item_list_string = ini_read_string("Save", "items", item_list_string);
ini_close();

item_list = ds_list_create();
ds_list_read(item_list, item_list_string);

if (ds_list_size(item_list) &lt; ds_list_size(base_item_list))
    selected = 1;
else
    selected = 0;

options_list = ds_list_create();
ds_list_add(options_list,
    "Start",
    "Continue",
    "Fullscreen",
    "Sound",
    "Music",
    "Quit"
);

room_list = ds_list_create();
ds_list_add(room_list,
    rm_tutorial,
    rm_short,
    rm_basic,
    rm_spider,
    rm_tower,
    rm_long,
    rm_final
);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var start_pressed = false;
var quit_pressed = false;
var up_pressed = false;
var down_pressed = false;

start_pressed = keyboard_check_pressed(ord('A')) || gamepad_button_check_pressed(0, gp_face1);
quit_pressed = keyboard_check_pressed(vk_escape) || gamepad_button_check_pressed(0, gp_start);
up_pressed = keyboard_check_pressed(vk_up) || obj_controls.leftstick_up_pressed;
down_pressed = keyboard_check_pressed(vk_down) || obj_controls.leftstick_down_pressed;

if (up_pressed) {
    if (selected &gt; 0) {
        audio_play_sound(snd_select, 0, false);
        selected--;
    }
}
if (down_pressed) {
    if (selected &lt; ds_list_size(options_list) - 1) {
        audio_play_sound(snd_select, 0, false);
        selected++;
    }
}
if (start_pressed) {
    switch (selected) {
        case 0:
            audio_stop_sound(mus_menu);
            audio_play_sound(snd_confirm, 0, false);
            control = instance_create(0, 0, obj_control);
            control.item_list = base_item_list;
            room_goto_next();
            break;
        case 1:
            if (ds_list_size(item_list) &lt; ds_list_size(base_item_list)) {
                audio_stop_sound(mus_menu);
                audio_play_sound(snd_confirm, 0, false);
                control = instance_create(0, 0, obj_control);
                control.item_list = item_list;
                room_goto(ds_list_find_value(room_list, ds_list_size(room_list) - (ds_list_size(item_list) + 1)));
            }
            else
                audio_play_sound(snd_error, 0, false);
            break;
        case 2:
            audio_play_sound(snd_confirm, 0, false);
            with (obj_draw_game)
                event_user(0);
            break;
        case 3:
            audio_play_sound(snd_confirm, 0, false);
            with (obj_audio)
                event_user(0);
            break;
        case 4:
            audio_play_sound(snd_confirm, 0, false);
            with (obj_audio)
                event_user(1);
            break;
        case 5:
            game_end();
        default:
            audio_play_sound(snd_error, 0, false);
            break;
    }
}
if (quit_pressed)
    game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_black);
draw_set_alpha(0.5);

draw_rectangle(0, 0, room_width, room_height, false);

draw_set_alpha(1);

draw_set_halign(fa_middle);
draw_set_valign(fa_center);

scr_curse_text(room_width / 2, 64, "Seven Sacrifices");

draw_set_color(c_white);
draw_set_font(fnt_menu);

var gap = 24;
for (var i = 0; i &lt; ds_list_size(options_list); i++) {
    var text = ds_list_find_value(options_list, i);
    
    if (i == 1 &amp;&amp; !(ds_list_size(item_list) &lt; ds_list_size(base_item_list)))
        draw_set_alpha(0.5);
    
    if (i &gt;= 2 &amp;&amp; i &lt;= 4) {
        text += ": ";
        switch (i) {
            case 2:
                if (window_get_fullscreen())
                    text += "On";
                else
                    text += "Off";
                break;
            case 3:
                if (obj_audio.sound_on)
                    text += "On";
                else
                    text += "Off";
                break;
            case 4:
                if (obj_audio.music_on)
                    text += "On";
                else
                    text += "Off";
                break;
        }
    }
    
    if (i == selected)
        text = "- " + text + " -";
    draw_text(room_width / 2, room_height / 2 + 32 - gap * ds_list_size(options_list) / 2 + gap * i, text);

    draw_set_alpha(1);
}

draw_set_font(fnt_desc);

var select_text = scr_parse_controls_text("Select: &lt;ud&gt;");
var confirm_text = scr_parse_controls_text("Confirm: &lt;a&gt;");
draw_text(room_width / 4, room_height - 16, select_text);
draw_text(room_width * (3 / 4), room_height - 16, confirm_text);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
